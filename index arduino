/*
*/
#include <Wire.h>                           // protocolo barramento
#include <Adafruit_GFX.h>                   // biblioteca grafica
#include <SPI.h>                            //protocolo de interface
#include <Ethernet.h>                       //Protocolo de internet
#include <LiquidCrystal.h>
#include "EmonLib.h"                        // inclui a biblioteca
EnergyMonitor emon1;                        // Cria uma instância
LiquidCrystal lcd(5, 4, 3, 2, 1, 0);      // Lista os pinos do LCD

#define   SAMPLING_TIME     0.0001668649    // intervalo de amostragem 166,86us
#define   LINE_FREQUENCY    60              // frequencia 60Hz Brasil
#define   VOLTAGE_AC        220.00          // 127 Volts
#define   ACS_MPY           15.41           // ganho/calibracao da corrente

String readString;                          //Ler caracteres porta serial

//Começa definindo os pinos que serão utilizados no projeto
const int pinorele = 9;   // pino de comando do modulo relé de estado sólido
const int pinopir = 6;     // pino de leitura digital do sensor de presença
int rede = 110.0;         //Tensao da rede eletrica
int pino_sct = 1;         //Pino do sensor de corrente
boolean ligado = true;
bool movimento;                // Variável do sensor de movimento
int tensao = 0;                // Variável do sensor de movimento
int acionamento;  //Variavel para guardar valor do sensor

//Informacoes de endereco IP, gateway, mascara de rede
byte mac[] = { 0xA4, 0x28, 0x72, 0xCA, 0x55, 0x2F };
byte ip[] = { 192, 168, 0, 200 };
byte gateway[] = { 192, 168, 0, 1 };
byte subnet[] = { 255, 255, 255, 0 };
EthernetServer server(80);


void setup() {

  emon1.current(1, ACS_MPY);                 // Corrente: pino analógico, calibracao.

  //Configuração de entrada do LCD
  lcd.begin(16, 2);
  lcd.clear();

//  emon1.current(pino_sct, 29);

  //Informacoes iniciais display
  lcd.setCursor(0, 0);
  lcd.print("Corr: ");
  
  //-----------------------------------------------------------------------------------------------------------//

  //define o pino que aciona o relé como saída
  pinMode(pinorele, OUTPUT);

  // define os pinos dos sensores como entrada
  pinMode(pinopir, INPUT);  //Define pino sensor de presença como entrada

  //-----------------------------------------------------------------------------------------------------------//
  
  //Inicializa Ethernet Shield
  Ethernet.begin(mac, ip, gateway, subnet);
  server.begin();

  //Desliga os reles
  digitalWrite(pinorele, HIGH);
}


void loop() {

  //Configuração da Saida LCD

  //Calcula a corrente
  double Irms = emon1.calcIrms(1996);


  //Mostra o valor da corrente
  lcd.print("Corrente: ");
  lcd.setCursor(10, 0);
  lcd.print(Irms);

  //Calcula e mostra o valor da potencia
  lcd.print(" Potencia : ");
  lcd.setCursor(10, 1);
  lcd.print("Potencia");
  lcd.setCursor(10, 1);
  lcd.print(Irms * VOLTAGE_AC, 1);

  delay(1);

  //-----------------------------------------------------------------------------------------------------------//

  EthernetClient client = server.available(); // Lica e desliga rele por controle remoto
  if (client) {
    while (client.connected())
    {
      if (client.available())
      {
        char c = client.read();
        if (readString.length() < 100) {
          readString += c;
        }
        if (c == 'n')
        {
          //Controle do rele
                   
          //Liga o Rele
          if (readString.indexOf("?ligar") > 1)
          {
            digitalWrite(pinorele, LOW);
            ligado = false;
          }
          else
          {
            //Desliga o Rele
            if (readString.indexOf("?desligar") > 0)
            {
              digitalWrite(pinorele, HIGH);
              ligado = true;
            }
          }

  
  readString = "";

  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html");
  client.println();
  client.println("<html>");
  client.println("<head>");
  client.println("<title>UNIAVAN - Automacao</title>");
  client.println("<meta http-equiv='Content-Type' content='text/html; charset=ISO-8859-1'>");
  client.println("<meta name='viewport' content='width=720, initial-scale=0.5' />");
  client.println("<link rel='stylesheet' type='text/css' href='https://tjcado.github.io/Projeto-arduino/Automacao2.css' />");
  client.println("<script type='text/javascript' src='https://tjcado.github.io/Projeto-arduino/Automacao2.js'></script>");
  client.println("</head>");
  client.println("<body>");
  client.println("<div id='wrapper'><img alt='RICARDO.LIMA' src='https://tjcado.github.io/Projeto-arduino/logo 1.jpg'/><br/>");
  client.println("<div id='div1'>Luzes</div>");
  client.println("<div id='div2'>Sala De Aula</div>");
  client.print("<div id='rele'></div><div id='estado' style='visibility: hidden;'>");
  client.print(ligado);
  client.println("</div>");
  client.println("<div id='botao'></div>");
  client.println("<div id='botao_2'></div>");
  client.print("<div id='movit'></div><div id='estado_2' style='visibility: hidden;'>");
  client.print("<div id='movit'></div><div id='estado_3' style='visibility: hidden;'>");
  client.print(movimento);
  client.println("</div>");
  client.println("</div>");
  client.println("</div>");
  client.println("<script>AlteraRele()</script>");
  
  if(digitalRead (pinopir) == HIGH){
  client.println("<script>AlteraMovimento2()</script>");
  }else{
  client.println("<script>AlteraMovimento1()</script>");
  }
  client.println("</div>");
  client.println("</body>");
  client.println("</head>");

  delay(1);
  client.stop();
        }
      }
    }
  }
}
